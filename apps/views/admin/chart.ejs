<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Th·ªëng k√™ ti·∫øn tr√¨nh h·ªçc c·ªßa h·ªçc sinh</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .container {
            padding-top: 20px;
            padding-bottom: 20px;
        }

        .chart-container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .no-data {
            text-align: center;
            color: #6c757d;
            padding: 20px;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>üìä Th·ªëng k√™ ti·∫øn tr√¨nh h·ªçc c·ªßa h·ªçc sinh</h2>
            <button id="reload-btn" class="btn btn-primary">T·∫£i l·∫°i</button>
        </div>

        <div id="spinner" class="spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">ƒêang t·∫£i...</span>
            </div>
        </div>

        <div class="row">
            <!-- Bi·ªÉu ƒë·ªì c·ªôt: ƒêi·ªÉm kinh nghi·ªám -->
            <div class="col-md-6 chart-container">
                <h5 class="text-center">ƒêi·ªÉm kinh nghi·ªám c·ªßa h·ªçc sinh</h5>
                <canvas id="xpChart"></canvas>
            </div>

            <!-- Bi·ªÉu ƒë·ªì tr√≤n: T·ª∑ l·ªá Gates ƒë√£ m·ªü -->
            <div class="col-md-6 chart-container">
                <h5 class="text-center">T·ª∑ l·ªá Gates ƒë√£ m·ªü</h5>
                <canvas id="gatesChart"></canvas>
            </div>

            <!-- Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng: Ti·∫øn tr√¨nh Stages theo th·ªùi gian -->
            <div class="col-md-12 chart-container">
                <h5 class="text-center">Ti·∫øn tr√¨nh m·ªü Stages theo th·ªùi gian</h5>
                <canvas id="stagesChart"></canvas>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        async function fetchAllProgress() {
            const spinner = document.getElementById('spinner');
            spinner.style.display = 'block';

            try {
                const res = await fetch('/admin/userprogress/all');
                const data = await res.json();

                if (!data.success) throw new Error('L·ªói t·ª´ server: ' + (data.message || 'Kh√¥ng x√°c ƒë·ªãnh'));

                spinner.style.display = 'none';

                if (data.data.length === 0) {
                    document.querySelector('.row').innerHTML = '<p class="no-data">Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.</p>';
                    return;
                }

                // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
                const usernames = data.data.map(progress => progress.username || 'Kh√¥ng x√°c ƒë·ªãnh');
                const xp = data.data.map(progress => progress.experiencePoints || 0);
                const gatesCount = data.data.map(progress => progress.unlockedGatesNames.length);
                const totalGates = gatesCount.reduce((a, b) => a + b, 0);
                const stagesOverTime = data.data.map(progress => ({
                    date: new Date(progress.createdAt).toLocaleDateString('vi-VN'),
                    stages: progress.unlockedStagesNames.length
                }));

                // Bi·ªÉu ƒë·ªì c·ªôt: ƒêi·ªÉm kinh nghi·ªám
                new Chart(document.getElementById('xpChart'), {
                    type: 'bar',
                    data: {
                        labels: usernames,
                        datasets: [{
                            label: 'ƒêi·ªÉm kinh nghi·ªám',
                            data: xp,
                            backgroundColor: 'rgba(54, 162, 235, 0.6)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'ƒêi·ªÉm' }
                            }
                        }
                    }
                });

                // Bi·ªÉu ƒë·ªì tr√≤n: T·ª∑ l·ªá Gates ƒë√£ m·ªü
                new Chart(document.getElementById('gatesChart'), {
                    type: 'pie',
                    data: {
                        labels: usernames,
                        datasets: [{
                            label: 'S·ªë Gates ƒë√£ m·ªü',
                            data: gatesCount,
                            backgroundColor: [
                                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'
                            ]
                        }]
                    },
                    options: {
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const value = context.raw;
                                        const percentage = ((value / totalGates) * 100).toFixed(2);
                                        return `${context.label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });

                // Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng: Ti·∫øn tr√¨nh Stages theo th·ªùi gian
                const dates = [...new Set(stagesOverTime.map(item => item.date))];
                const stagesData = dates.map(date => {
                    return stagesOverTime.filter(item => item.date === date)
                        .reduce((sum, item) => sum + item.stages, 0);
                });

                new Chart(document.getElementById('stagesChart'), {
                    type: 'line',
                    data: {
                        labels: dates,
                        datasets: [{
                            label: 'S·ªë Stages ƒë√£ m·ªü',
                            data: stagesData,
                            fill: false,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            tension: 0.1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'S·ªë Stages' }
                            },
                            x: {
                                title: { display: true, text: 'Ng√†y' }
                            }
                        }
                    }
                });

            } catch (err) {
                spinner.style.display = 'none';
                console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', err);
                document.querySelector('.row').innerHTML = `<p class="no-data">L·ªói khi t·∫£i d·ªØ li·ªáu: ${err.message}</p>`;
            }
        }

        // T·∫£i d·ªØ li·ªáu khi trang load
        window.onload = fetchAllProgress;

        // Th√™m s·ª± ki·ªán cho n√∫t t·∫£i l·∫°i
        document.getElementById('reload-btn').addEventListener('click', fetchAllProgress);
    </script>
</body>

</html>